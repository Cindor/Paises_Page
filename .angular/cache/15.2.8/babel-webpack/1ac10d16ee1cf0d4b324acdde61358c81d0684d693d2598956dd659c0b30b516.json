{"ast":null,"code":"import { catchError, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CountriesService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://restcountries.com/v3.1';\n  }\n  searchCountryByAlphaCode(code) {\n    return this.http.get(`${this.apiUrl}/alpha/${code}`).pipe(catchError(() => of([])));\n  }\n  searchCapital(term) {\n    /* para minimizar en \"URL\" Todo el texto */\n    const url = `${this.apiUrl}/capital/${term}`;\n    /*  Todo el texto de arriba */\n    return this.http.get(url).pipe(catchError(() => of([])));\n  }\n  searchCountry(term) {\n    return this.http.get(`${this.apiUrl}/name/${term}`).pipe(catchError(() => of([])));\n  }\n  searchRegion(region) {\n    return this.http.get(`${this.apiUrl}/region/${region}`).pipe(catchError(() => of([])));\n  }\n}\nCountriesService.ɵfac = function CountriesService_Factory(t) {\n  return new (t || CountriesService)(i0.ɵɵinject(i1.HttpClient));\n};\nCountriesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CountriesService,\n  factory: CountriesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,EAAEC,EAAE,QAAQ,MAAM;;;AAMjD,OAAM,MAAOC,gBAAgB;EAK3BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,WAAM,GAAW,gCAAgC;EAGhB;EAEzCC,wBAAwB,CAACC,IAAY;IAEnC,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAa,GAAI,IAAI,CAACC,MAAO,UAAWF,IAAK,EAAE,CAAE,CAACG,IAAI,CAAET,UAAU,CAAG,MAAMC,EAAE,CAAE,EAAE,CAAC,CAAE,CAAE;EAC5G;EAGAS,aAAa,CAAEC,IAAY;IACvB;IACF,MAAMC,GAAG,GAAG,GAAI,IAAI,CAACJ,MAAO,YAAaG,IAAK,EAAE;IAC7B;IACnB,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAaK,GAAG,CAAE,CAACH,IAAI,CAAET,UAAU,CAAG,MAAMC,EAAE,CAAE,EAAE,CAAC,CAAE,CACxE;EACH;EAEAY,aAAa,CAAEF,IAAY;IACzB,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAa,GAAI,IAAI,CAACC,MAAO,SAAUG,IAAK,EAAE,CAAE,CAACF,IAAI,CAAET,UAAU,CAAG,MAAMC,EAAE,CAAE,EAAE,CAAC,CAAE,CAAE;EAC3G;EAEAa,YAAY,CAAEC,MAAc;IAC1B,OAAO,IAAI,CAACX,IAAI,CAACG,GAAG,CAAa,GAAI,IAAI,CAACC,MAAO,WAAYO,MAAO,EAAE,CAAE,CAACN,IAAI,CAAET,UAAU,CAAG,MAAMC,EAAE,CAAE,EAAE,CAAC,CAAE,CAAE;EAC/G;;AA3BWC,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAc,SAAhBd,gBAAgB;EAAAe,YAFJ;AAAM","names":["catchError","of","CountriesService","constructor","http","searchCountryByAlphaCode","code","get","apiUrl","pipe","searchCapital","term","url","searchCountry","searchRegion","region","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Joel\\Desktop\\Angular\\04-CountryApp\\src\\app\\countries\\services\\countries.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, catchError, of } from 'rxjs';\n\nimport { Country } from '../interfaces/country';\n\n@Injectable({providedIn: 'root'})\n\nexport class CountriesService {\n\n  private apiUrl: string = 'https://restcountries.com/v3.1'\n\n\n  constructor(private http: HttpClient ) { }\n\n  searchCountryByAlphaCode(code: string): Observable<Country[]>{\n    \n    return this.http.get<Country[]>( `${ this.apiUrl }/alpha/${ code }` ).pipe( catchError ( () => of ([]) ) );\n  }\n\n\n  searchCapital( term: string ): Observable<Country[]> {\n      /* para minimizar en \"URL\" Todo el texto */\n    const url = `${ this.apiUrl }/capital/${ term }`;\n                       /*  Todo el texto de arriba */\n    return this.http.get<Country[]>( url ).pipe( catchError ( () => of ([]) )\n    );\n  };\n\n  searchCountry( term: string ): Observable<Country[]> {\n    return this.http.get<Country[]>( `${ this.apiUrl }/name/${ term }` ).pipe( catchError ( () => of ([]) ) );\n  };\n\n  searchRegion( region: string ): Observable<Country[]> {\n    return this.http.get<Country[]>( `${ this.apiUrl }/region/${ region }` ).pipe( catchError ( () => of ([]) ) );\n  };\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}